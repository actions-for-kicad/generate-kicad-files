name: "Generate KiCad files"
description: "Generate KiCad files like a PDF schematic, BOM files, etc."
branding:
  icon: "cpu"
  color: "yellow"

inputs:
  file:
    description: "The location to the schematic or PCB file."
    required: true
  version:
    description: 'The KiCad version in the following format: "x.y" or "x.y.z". For example: "8.0" or "8.0.1"'
    required: true
  type:
    description: >
      Export type, choose one of the following:
      - schematic_pdf
      - schematic_svg
      - schematic_bom
      - schematic_netlist
      - pcb_step
      - pcb_pos
      - pcb_gerbers
      - pcb_drill
      - pcb_gerbers_drill
    required: true
  layers:
    description: >
      The layers that need to be exported in a comma-separated list. Example: "F.Cu,B.Cu". If no layers are given, all layers are exported.
      This input can be used when exporting the following types:
      - pcb_gerbers
      - pcb_gerbers_drill
  black-and-white:
    description: >
      Export schematic in black and white.
      This option can be used when exporting the following types:
      - schematic_pdf
      - schematic_svg
    default: false

runs:
  using: "docker"
  image: "docker.io/kicad/kicad:${inputs.version}"
  args:
    - /bin/bash
    - -c
    - |
      #!/bin/bash

      # Parse all variables
      file_name="${{ inputs.file-name }}"
      black_and_white="${{ inputs.black-and-white }}"
      type="${{ inputs.type }}"
      layers="${{ inputs.layers }}"

      # Check if the file name is supplied.
      if [ -z "$file_name" ]; then
        echo "::error::Please supply source file"
        exit 1
      fi

      # Check if the export type is supplied.
      if [ -z "$type" ]; then
        echo "::error::Please supply type"
        exit 1
      fi

      # Get the file_name without file type
      export_zip_name="$(basename "$file_name" | rev | cut -d '.' -f 2- | rev)"

      # Function to export schematic
      export_schematic() {
        local format=$1
        if [ "$black_and_white" == "true" ]; then
          kicad-cli sch export "$format" --black-and-white "$file_name"
        else
          kicad-cli sch export "$format" "$file_name"
        fi
      }

      # Export based on type
      case $type in
        schematic_pdf) export_schematic pdf ;;
        schematic_svg) export_schematic svg ;;
        schematic_bom) kicad-cli sch export python-bom "$file_name" ;;
        schematic_netlist) kicad-cli sch export netlist "$file_name" ;;
        pcb_step) kicad-cli pcb export step --subst-models "$file_name" ;;
        pcb_pos) kicad-cli pcb export pos "$file_name" ;;
        pcb_gerbers)
          kicad-cli pcb export gerbers -l "$layers" "$file_name"
          zip "${export_zip_name}-gerbers.zip" *.g*
          ;;
        pcb_drill) kicad-cli pcb export drill "$file_name" ;;
        pcb_gerbers_drill)
          kicad-cli pcb export gerbers -l "$layers" "$file_name"
          kicad-cli pcb export drill "$file_name"
          zip "${export_zip_name}-gerbers.zip" *.g* *.drl
          ;;
        *)
          echo "::error::Type is not correct"
          exit 1
          ;;
      esac

      # Give error if the export failed
      if [ "$?" != "0" ]; then
        echo "::error::Export failed."
        exit 1
      fi
